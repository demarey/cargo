"
A BleedingEdgeUpdatePolicy is used to specify that we should always take the latest version of the package targeted by the dependency.
"
Class {
	#name : #CGOBleedingEdgeResolutionStrategy,
	#superclass : #CGOPackageVersionResolutionStrategy,
	#category : #'CargoPackageManager-SolverStrategies'
}

{ #category : #printing }
CGOBleedingEdgeResolutionStrategy >> printOn: aStream [
	aStream nextPutAll: '#bleedingEdge'
]

{ #category : #solving }
CGOBleedingEdgeResolutionStrategy >> versionOf: aCGOPackageDependency in: aRepositoryList forEnvironment: platformAttributes [
	| candidates packageName |

	candidates := Set new.
	packageName := aCGOPackageDependency dependencyName.
	aRepositoryList 
		do: [ :repository | 
			[ candidates add: (repository latestVersionOfPackage: packageName suitableForEnvironment: platformAttributes) asPackageVersionReference ]
				on: PBPackageNotFoundError
				do: [ "ignore" ] ].
	candidates ifEmpty: [ PBPackageNotFoundError signal: packageName ].
	(candidates size = 1)
		ifTrue: [ ^ candidates anyOne ].
	candidates := candidates groupedBy: #packageName.
	(candidates size > 1)
		ifTrue: [ PBUnresolvedDependency package: packageName candidates: candidates ].
	^ (candidates at: packageName) detectMax: [ :v | v ]
]
